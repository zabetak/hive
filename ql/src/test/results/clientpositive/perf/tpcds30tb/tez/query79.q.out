Plan optimized by CBO.

Vertex dependency in root stage
Map 2 <- Map 6 (BROADCAST_EDGE), Map 7 (BROADCAST_EDGE), Map 8 (BROADCAST_EDGE)
Reducer 3 <- Map 2 (SIMPLE_EDGE)
Reducer 4 <- Map 1 (CUSTOM_SIMPLE_EDGE), Reducer 3 (CUSTOM_SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 5 vectorized, llap
      File Output Operator [FS_128]
        Limit [LIM_127] (rows=100 width=596)
          Number of rows:100
          Select Operator [SEL_126] (rows=5713516612 width=596)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 4 [SIMPLE_EDGE] vectorized, llap
            SHUFFLE [RS_125]
              Select Operator [SEL_124] (rows=5713516612 width=596)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                Top N Key Operator [TNK_123] (rows=5713516612 width=597)
                  keys:_col2, _col1, substr(_col5, 1, 30), _col7,top n:100
                  Map Join Operator [MAPJOIN_122] (rows=5713516612 width=597)
                    Conds:RS_121.KEY.reducesinkkey0=RS_119.KEY.reducesinkkey0(Inner),DynamicPartitionHashJoin:true,Output:["_col1","_col2","_col3","_col5","_col6","_col7","_col8"]
                  <-Map 1 [CUSTOM_SIMPLE_EDGE] vectorized, llap
                    PARTITION_ONLY_SHUFFLE [RS_121]
                      PartitionCols:_col0
                      Select Operator [SEL_120] (rows=80000000 width=188)
                        Output:["_col0","_col1","_col2"]
                        TableScan [TS_0] (rows=80000000 width=188)
                          default@customer,customer, ACID table,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_first_name","c_last_name"]
                  <-Reducer 3 [CUSTOM_SIMPLE_EDGE] vectorized, llap
                    PARTITION_ONLY_SHUFFLE [RS_119]
                      PartitionCols:_col1
                      Select Operator [SEL_118] (rows=5713516612 width=422)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                        Group By Operator [GBY_117] (rows=5713516612 width=335)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                        <-Map 2 [SIMPLE_EDGE] vectorized, llap
                          SHUFFLE [RS_116]
                            PartitionCols:_col0, _col1, _col2, _col3
                            Group By Operator [GBY_115] (rows=5713516612 width=335)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col5)","sum(_col6)"],keys:_col0, _col2, _col4, _col10
                              Map Join Operator [MAPJOIN_114] (rows=5713516612 width=264)
                                Conds:MAPJOIN_113._col1=RS_109._col0(Inner),Output:["_col0","_col2","_col4","_col5","_col6","_col10"]
                              <-Map 8 [BROADCAST_EDGE] vectorized, llap
                                BROADCAST [RS_109]
                                  PartitionCols:_col0
                                  Select Operator [SEL_108] (rows=6480 width=8)
                                    Output:["_col0"]
                                    Filter Operator [FIL_107] (rows=6480 width=16)
                                      predicate:((hd_vehicle_count > 0) or (hd_dep_count = 8))
                                      TableScan [TS_11] (rows=7200 width=16)
                                        default@household_demographics,household_demographics, ACID table,Tbl:COMPLETE,Col:COMPLETE,Output:["hd_demo_sk","hd_dep_count","hd_vehicle_count"]
                              <-Map Join Operator [MAPJOIN_113] (rows=6348351959 width=278)
                                  Conds:MAPJOIN_112._col3=RS_106._col0(Inner),Output:["_col0","_col1","_col2","_col4","_col5","_col6","_col10"]
                                <-Map 7 [BROADCAST_EDGE] vectorized, llap
                                  BROADCAST [RS_106]
                                    PartitionCols:_col0
                                    Select Operator [SEL_105] (rows=1636 width=101)
                                      Output:["_col0","_col1"]
                                      Filter Operator [FIL_104] (rows=1636 width=104)
                                        predicate:s_number_employees BETWEEN 200 AND 295
                                        TableScan [TS_8] (rows=1704 width=104)
                                          default@store,store, ACID table,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_number_employees","s_city"]
                                <-Map Join Operator [MAPJOIN_112] (rows=6604454498 width=193)
                                    Conds:SEL_111._col7=RS_100._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                  <-Map 6 [BROADCAST_EDGE] vectorized, llap
                                    BROADCAST [RS_100]
                                      PartitionCols:_col0
                                      Select Operator [SEL_99] (rows=157 width=8)
                                        Output:["_col0"]
                                        Filter Operator [FIL_98] (rows=157 width=16)
                                          predicate:((d_dow = 1) and (d_year) IN (1998, 1999, 2000))
                                          TableScan [TS_5] (rows=73049 width=16)
                                            default@date_dim,date_dim, ACID table,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_dow"]
                                    Dynamic Partitioning Event Operator [EVENT_103] (rows=78 width=8)
                                      Group By Operator [GBY_102] (rows=78 width=8)
                                        Output:["_col0"],keys:_col0
                                        Select Operator [SEL_101] (rows=157 width=8)
                                          Output:["_col0"]
                                           Please refer to the previous Select Operator [SEL_99]
                                  <-Select Operator [SEL_111] (rows=76814649841 width=265)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                      Filter Operator [FIL_110] (rows=76814649841 width=265)
                                        predicate:(ss_hdemo_sk is not null and ss_customer_sk is not null and ss_store_sk is not null)
                                        TableScan [TS_2] (rows=82510879939 width=265)
                                          default@store_sales,store_sales, ACID table,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_customer_sk","ss_hdemo_sk","ss_addr_sk","ss_store_sk","ss_ticket_number","ss_coupon_amt","ss_net_profit"]

