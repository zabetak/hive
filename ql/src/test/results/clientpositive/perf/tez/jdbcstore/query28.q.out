Warning: Map Join MAPJOIN[105][bigTable=?] in task 'Reducer 3' is a cross product
Warning: Map Join MAPJOIN[104][bigTable=?] in task 'Reducer 3' is a cross product
Warning: Map Join MAPJOIN[103][bigTable=?] in task 'Reducer 3' is a cross product
Warning: Map Join MAPJOIN[102][bigTable=?] in task 'Reducer 3' is a cross product
Warning: Map Join MAPJOIN[101][bigTable=?] in task 'Reducer 3' is a cross product
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Map 1 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Map 1 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Reducer 11 (BROADCAST_EDGE), Reducer 13 (BROADCAST_EDGE), Reducer 2 (CUSTOM_SIMPLE_EDGE), Reducer 5 (BROADCAST_EDGE), Reducer 7 (BROADCAST_EDGE), Reducer 9 (BROADCAST_EDGE)
Reducer 4 <- Map 1 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Map 1 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Map 1 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 3 vectorized, llap
      File Output Operator [FS_176]
        Select Operator [SEL_175] (rows=1 width=768)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"]
          Map Join Operator [MAPJOIN_174] (rows=1 width=768)
            Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"]
          <-Reducer 13 [BROADCAST_EDGE] vectorized, llap
            BROADCAST [RS_167]
              Select Operator [SEL_166] (rows=1 width=128)
                Output:["_col0","_col1","_col2"]
                Group By Operator [GBY_165] (rows=1 width=128)
                  Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)","count(VALUE._col2)"]
                <-Reducer 12 [CUSTOM_SIMPLE_EDGE] vectorized, llap
                  PARTITION_ONLY_SHUFFLE [RS_164]
                    Group By Operator [GBY_163] (rows=1 width=128)
                      Output:["_col0","_col1","_col2"],aggregations:["sum(_col1)","count(_col2)","count(_col0)"]
                      Group By Operator [GBY_162] (rows=2077040658 width=226)
                        Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0
                      <-Map 1 [SIMPLE_EDGE] vectorized, llap
                        SHUFFLE [RS_134]
                          PartitionCols:_col0
                          Group By Operator [GBY_128] (rows=2077040658 width=226)
                            Output:["_col0","_col1","_col2"],aggregations:["sum(ss_list_price)","count(ss_list_price)"],keys:ss_list_price
                            Select Operator [SEL_122] (rows=4154081316 width=324)
                              Output:["ss_list_price"]
                              Filter Operator [FIL_116] (rows=4154081316 width=324)
                                predicate:(ss_quantity BETWEEN 6 AND 10 and (ss_list_price BETWEEN 91 AND 101 or ss_coupon_amt BETWEEN 1430 AND 2430 or ss_wholesale_cost BETWEEN 32 AND 52))
                                TableScan [TS_0] (rows=86404891377 width=324)
                                  tpcds_bin_partitioned_orc_30000@store_sales,store_sales, ACID table,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_quantity","ss_wholesale_cost","ss_list_price","ss_coupon_amt"]
          <-Map Join Operator [MAPJOIN_173] (rows=1 width=640)
              Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14"]
            <-Reducer 11 [BROADCAST_EDGE] vectorized, llap
              BROADCAST [RS_161]
                Select Operator [SEL_160] (rows=1 width=128)
                  Output:["_col0","_col1","_col2"]
                  Group By Operator [GBY_159] (rows=1 width=128)
                    Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)","count(VALUE._col2)"]
                  <-Reducer 10 [CUSTOM_SIMPLE_EDGE] vectorized, llap
                    PARTITION_ONLY_SHUFFLE [RS_158]
                      Group By Operator [GBY_157] (rows=1 width=128)
                        Output:["_col0","_col1","_col2"],aggregations:["sum(_col1)","count(_col2)","count(_col0)"]
                        Group By Operator [GBY_156] (rows=2077040658 width=226)
                          Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0
                        <-Map 1 [SIMPLE_EDGE] vectorized, llap
                          SHUFFLE [RS_133]
                            PartitionCols:_col0
                            Group By Operator [GBY_127] (rows=2077040658 width=226)
                              Output:["_col0","_col1","_col2"],aggregations:["sum(ss_list_price)","count(ss_list_price)"],keys:ss_list_price
                              Select Operator [SEL_121] (rows=4154081316 width=324)
                                Output:["ss_list_price"]
                                Filter Operator [FIL_115] (rows=4154081316 width=324)
                                  predicate:(ss_quantity BETWEEN 11 AND 15 and (ss_list_price BETWEEN 66 AND 76 or ss_coupon_amt BETWEEN 920 AND 1920 or ss_wholesale_cost BETWEEN 4 AND 24))
                                   Please refer to the previous TableScan [TS_0]
            <-Map Join Operator [MAPJOIN_172] (rows=1 width=512)
                Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
              <-Reducer 9 [BROADCAST_EDGE] vectorized, llap
                BROADCAST [RS_155]
                  Select Operator [SEL_154] (rows=1 width=128)
                    Output:["_col0","_col1","_col2"]
                    Group By Operator [GBY_153] (rows=1 width=128)
                      Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)","count(VALUE._col2)"]
                    <-Reducer 8 [CUSTOM_SIMPLE_EDGE] vectorized, llap
                      PARTITION_ONLY_SHUFFLE [RS_152]
                        Group By Operator [GBY_151] (rows=1 width=128)
                          Output:["_col0","_col1","_col2"],aggregations:["sum(_col1)","count(_col2)","count(_col0)"]
                          Group By Operator [GBY_150] (rows=2077040658 width=226)
                            Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0
                          <-Map 1 [SIMPLE_EDGE] vectorized, llap
                            SHUFFLE [RS_132]
                              PartitionCols:_col0
                              Group By Operator [GBY_126] (rows=2077040658 width=226)
                                Output:["_col0","_col1","_col2"],aggregations:["sum(ss_list_price)","count(ss_list_price)"],keys:ss_list_price
                                Select Operator [SEL_120] (rows=4154081316 width=324)
                                  Output:["ss_list_price"]
                                  Filter Operator [FIL_114] (rows=4154081316 width=324)
                                    predicate:(ss_quantity BETWEEN 16 AND 20 and (ss_list_price BETWEEN 142 AND 152 or ss_coupon_amt BETWEEN 3054 AND 4054 or ss_wholesale_cost BETWEEN 80 AND 100))
                                     Please refer to the previous TableScan [TS_0]
              <-Map Join Operator [MAPJOIN_171] (rows=1 width=384)
                  Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                <-Reducer 7 [BROADCAST_EDGE] vectorized, llap
                  BROADCAST [RS_149]
                    Select Operator [SEL_148] (rows=1 width=128)
                      Output:["_col0","_col1","_col2"]
                      Group By Operator [GBY_147] (rows=1 width=128)
                        Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)","count(VALUE._col2)"]
                      <-Reducer 6 [CUSTOM_SIMPLE_EDGE] vectorized, llap
                        PARTITION_ONLY_SHUFFLE [RS_146]
                          Group By Operator [GBY_145] (rows=1 width=128)
                            Output:["_col0","_col1","_col2"],aggregations:["sum(_col1)","count(_col2)","count(_col0)"]
                            Group By Operator [GBY_144] (rows=2077040658 width=226)
                              Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0
                            <-Map 1 [SIMPLE_EDGE] vectorized, llap
                              SHUFFLE [RS_131]
                                PartitionCols:_col0
                                Group By Operator [GBY_125] (rows=2077040658 width=226)
                                  Output:["_col0","_col1","_col2"],aggregations:["sum(ss_list_price)","count(ss_list_price)"],keys:ss_list_price
                                  Select Operator [SEL_119] (rows=4154081316 width=324)
                                    Output:["ss_list_price"]
                                    Filter Operator [FIL_113] (rows=4154081316 width=324)
                                      predicate:(ss_quantity BETWEEN 21 AND 25 and (ss_list_price BETWEEN 135 AND 145 or ss_coupon_amt BETWEEN 14180 AND 15180 or ss_wholesale_cost BETWEEN 38 AND 58))
                                       Please refer to the previous TableScan [TS_0]
                <-Map Join Operator [MAPJOIN_170] (rows=1 width=256)
                    Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                  <-Reducer 5 [BROADCAST_EDGE] vectorized, llap
                    BROADCAST [RS_143]
                      Select Operator [SEL_142] (rows=1 width=128)
                        Output:["_col0","_col1","_col2"]
                        Group By Operator [GBY_141] (rows=1 width=128)
                          Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)","count(VALUE._col2)"]
                        <-Reducer 4 [CUSTOM_SIMPLE_EDGE] vectorized, llap
                          PARTITION_ONLY_SHUFFLE [RS_140]
                            Group By Operator [GBY_139] (rows=1 width=128)
                              Output:["_col0","_col1","_col2"],aggregations:["sum(_col1)","count(_col2)","count(_col0)"]
                              Group By Operator [GBY_138] (rows=2077040658 width=226)
                                Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0
                              <-Map 1 [SIMPLE_EDGE] vectorized, llap
                                SHUFFLE [RS_130]
                                  PartitionCols:_col0
                                  Group By Operator [GBY_124] (rows=2077040658 width=226)
                                    Output:["_col0","_col1","_col2"],aggregations:["sum(ss_list_price)","count(ss_list_price)"],keys:ss_list_price
                                    Select Operator [SEL_118] (rows=4154081316 width=324)
                                      Output:["ss_list_price"]
                                      Filter Operator [FIL_112] (rows=4154081316 width=324)
                                        predicate:(ss_quantity BETWEEN 26 AND 30 and (ss_list_price BETWEEN 28 AND 38 or ss_coupon_amt BETWEEN 2513 AND 3513 or ss_wholesale_cost BETWEEN 42 AND 62))
                                         Please refer to the previous TableScan [TS_0]
                  <-Select Operator [SEL_169] (rows=1 width=128)
                      Output:["_col0","_col1","_col2"]
                      Group By Operator [GBY_168] (rows=1 width=128)
                        Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)","count(VALUE._col2)"]
                      <-Reducer 2 [CUSTOM_SIMPLE_EDGE] vectorized, llap
                        PARTITION_ONLY_SHUFFLE [RS_137]
                          Group By Operator [GBY_136] (rows=1 width=128)
                            Output:["_col0","_col1","_col2"],aggregations:["sum(_col1)","count(_col2)","count(_col0)"]
                            Group By Operator [GBY_135] (rows=2077040658 width=226)
                              Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0
                            <-Map 1 [SIMPLE_EDGE] vectorized, llap
                              SHUFFLE [RS_129]
                                PartitionCols:_col0
                                Group By Operator [GBY_123] (rows=2077040658 width=226)
                                  Output:["_col0","_col1","_col2"],aggregations:["sum(ss_list_price)","count(ss_list_price)"],keys:ss_list_price
                                  Select Operator [SEL_117] (rows=4154081316 width=324)
                                    Output:["ss_list_price"]
                                    Filter Operator [FIL_111] (rows=4154081316 width=324)
                                      predicate:(ss_quantity BETWEEN 0 AND 5 and (ss_list_price BETWEEN 11 AND 21 or ss_coupon_amt BETWEEN 460 AND 1460 or ss_wholesale_cost BETWEEN 14 AND 34))
                                       Please refer to the previous TableScan [TS_0]

